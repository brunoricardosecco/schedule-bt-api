// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id                             String         @id @default(uuid())
  name                           String
  email                          String         @unique
  companyId                      String?        @map("company_id")
  emailValidationToken           String?        @map("email_validation_token")
  emailValidationTokenExpiration DateTime?      @map("email_validation_token_expiration")
  hashedPassword                 String?        @map("hashed_password")
  role                           Role           @default(CLIENT)
  isConfirmed                    Boolean        @default(false) @map("is_confirmed")
  company                        Companies?     @relation(fields: [companyId], references: [id])
  createdAt                      DateTime       @default(now()) @map("created_at")
  updatedAt                      DateTime       @default(now()) @map("updated_at")
  reservations                   Reservations[]
}

model Companies {
  id                       String         @id @default(uuid())
  name                     String
  reservationPrice         Decimal        @map("reservation_price") @db.Decimal(10, 2)
  createdAt                DateTime       @default(now()) @map("created_at")
  updatedAt                DateTime       @default(now()) @map("updated_at")
  accounts                 Accounts[]
  courts                   Courts[]
  reservations             Reservations[]
  serviceHours             ServiceHours[]
  reservationTimeInMinutes Int            @map("reservation_time_in_minutes")
}

model ServiceHours {
  id        String    @id @default(uuid())
  weekday   Int
  startTime String    @map("start_time")
  endTime   String    @map("end_time")
  company   Companies @relation(fields: [companyId], references: [id])
  companyId String
}

model Courts {
  id        String    @id @default(uuid())
  name      String
  companyId String    @map("company_id")
  company   Companies @relation(fields: [companyId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
}

model Reservations {
  id                String            @id @default(uuid())
  reservationPrice  Decimal           @map("reservation_price") @db.Decimal(10, 2)
  reservationStatus ReservationStatus @default(AWAITING_PAYMENT) @map("reservation_status")
  reservationDate   DateTime
  description       String?
  accountId         String?           @map("account_id")
  account           Accounts?         @relation(fields: [accountId], references: [id])
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @default(now()) @map("updated_at")
  company           Companies?        @relation(fields: [companyId], references: [id])
  companyId         String?
}

model Errors {
  id        String   @id @default(uuid())
  stack     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

enum Role {
  CLIENT
  GENERAL_ADMIN
  COMPANY_ADMIN
  EMPLOYEE
}

enum ReservationStatus {
  PAID
  AWAITING_PAYMENT
  PENDING
}
